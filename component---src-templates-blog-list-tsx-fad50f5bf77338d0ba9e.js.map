{"version":3,"sources":["webpack:///./src/templates/blog-list.tsx"],"names":["BlogList","props","Posts","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","title","className","map","node","key","fields","slug","frontmatter","image","cover","childImageSharp","fluid","url","date","tags","readTime","readingTime","text","prevLink","nextLink","totalPage","pageQuery"],"mappings":"kQA4DeA,UAnDE,SAACC,GAAe,IAEzBC,EADWD,EAATE,KACWC,kBAAkBC,MAFN,EAGGJ,EAAMK,YAAhCC,EAHuB,EAGvBA,YAAaC,EAHU,EAGVA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EACJJ,EAAc,GAAM,EAAI,UAAxB,UAA8CA,EAAc,GAAGK,WAC3DC,EAAW,UAAUN,EAAc,GAAGK,WACtCE,GAAYL,GAAWE,EACvBI,GAAYL,GAAUG,EAE5B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKG,MAAK,QAAUT,IAEpB,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAASU,UAAU,YAChBf,EAAMgB,KAAI,YAAmB,IAAhBC,EAAgB,EAAhBA,KACZ,OACE,gBAAC,IAAD,CAASC,IAAKD,EAAKE,OAAOC,MACxB,gBAAC,IAAD,CACEN,MAAOG,EAAKI,YAAYP,OAASG,EAAKE,OAAOC,KAC7CE,MAC4B,MAA1BL,EAAKI,YAAYE,MACb,KACAN,EAAKI,YAAYE,MAAMC,gBAAgBC,MAE7CC,IAAKT,EAAKE,OAAOC,KACjBO,KAAMV,EAAKI,YAAYM,KACvBC,KAAMX,EAAKI,YAAYO,KACvBC,SAAUZ,EAAKE,OAAOW,YAAYC,aAQ9C,gBAAC,IAAD,CACEC,SAAUpB,EACVqB,SAAUpB,EACVR,YAAW,GAAKA,EAChB6B,UAAS,GAAK5B,OASjB,IAAM6B,EAAY","file":"component---src-templates-blog-list-tsx-fad50f5bf77338d0ba9e.js","sourcesContent":["import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Masonry from \"react-masonry-component\"\r\nimport MasonryCard from \"../components/masonry-card/masonry-card\"\r\nimport Pagination from \"../components/pagination/pagination\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport { BlogPostsWrapper, PostRow, PostCol } from \"./templates.style\"\r\n\r\nconst BlogList = (props: any) => {\r\n  const { data } = props\r\n  const Posts = data.allMarkdownRemark.edges\r\n  const { currentPage, numPages } = props.pageContext\r\n  const isFirst = currentPage === 1\r\n  const isLast = currentPage === numPages\r\n  const prevPage =\r\n    currentPage - 1 === 1 ? \"/page/1\" : `/page/${(currentPage - 1).toString()}`\r\n  const nextPage = `/page/${(currentPage + 1).toString()}`\r\n  const PrevLink = !isFirst && prevPage\r\n  const NextLink = !isLast && nextPage\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={`Page ${currentPage}`} />\r\n\r\n      <BlogPostsWrapper>\r\n        <PostRow>\r\n          <Masonry className=\"showcase\">\r\n            {Posts.map(({ node }: any) => {\r\n              return (\r\n                <PostCol key={node.fields.slug}>\r\n                  <MasonryCard\r\n                    title={node.frontmatter.title || node.fields.slug}\r\n                    image={\r\n                      node.frontmatter.cover == null\r\n                        ? null\r\n                        : node.frontmatter.cover.childImageSharp.fluid\r\n                    }\r\n                    url={node.fields.slug}\r\n                    date={node.frontmatter.date}\r\n                    tags={node.frontmatter.tags}\r\n                    readTime={node.fields.readingTime.text}\r\n                  />\r\n                </PostCol>\r\n              )\r\n            })}\r\n          </Masonry>\r\n        </PostRow>\r\n\r\n        <Pagination\r\n          prevLink={PrevLink}\r\n          nextLink={NextLink}\r\n          currentPage={`${currentPage}`}\r\n          totalPage={`${numPages}`}\r\n        />\r\n      </BlogPostsWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogList\r\n\r\nexport const pageQuery = graphql`\r\n  query($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    sitePage {\r\n      path\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n            readingTime {\r\n              text\r\n            }\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM [</span>]\")\r\n            title\r\n            description\r\n            tags\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1170, quality: 90) {\r\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}